
parameters: 
  - name: ModulePath
    type: string
    default: 
  - name: Recurse
    type: boolean
    default: false
  - name: PesterMaxVersion
    type: string
    default: '4.99.99'
stages: 
  - stage: PowerShellStaticAnalysis
    displayName: Static Analysis
    condition: succeeded()
    jobs: 
      - job: PSScriptAnalyzer
        displayName: PSScriptAnalyzer
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: & .\Ado\Steps\InstallPSDevOps.ps1
            name: InstallPSDevOps
            displayName: InstallPSDevOps
          - powershell: & .\Ado\Steps\InstallPSScriptAnalyzer.ps1
            name: InstallPSScriptAnalyzer
            displayName: InstallPSScriptAnalyzer
          - powershell: |
              $Parameters = @{}
              $Parameters.ModulePath = @'
              ${{parameters.ModulePath}}
              '@
              $Parameters.Recurse = @'
              ${{parameters.Recurse}}
              '@
              $Parameters.Recurse = $parameters.Recurse -match 'true';
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] RunPSScriptAnalyzer $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\RunPSScriptAnalyzer.ps1' @Parameters
            name: RunPSScriptAnalyzer
            displayName: RunPSScriptAnalyzer
      - job: ScriptCop
        displayName: ScriptCop
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: & .\Ado\Steps\InstallPSDevOps.ps1
            name: InstallPSDevOps
            displayName: InstallPSDevOps
          - powershell: & .\Ado\Steps\InstallScriptCop.ps1
            name: InstallScriptCop
            displayName: InstallScriptCop
          - powershell: |
              $Parameters = @{}
              $Parameters.ModulePath = @'
              ${{parameters.ModulePath}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] RunScriptCop $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\RunScriptCop.ps1' @Parameters
            name: RunScriptCop
            displayName: RunScriptCop

  - stage: TestPowerShellCrossPlatform
    displayName: Test
    jobs: 
      - job: Windows
        displayName: Windows
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] InstallPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\InstallPester.ps1' @Parameters
            name: InstallPester
            displayName: InstallPester
          - powershell: |
              $Parameters = @{}
              $Parameters.ModulePath = @'
              ${{parameters.ModulePath}}
              '@
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] RunPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\RunPester.ps1' @Parameters
            name: RunPester
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
            condition: always()
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)
            condition: always()
      - job: Linux
        displayName: Linux
        pool: 
          vmImage: ubuntu-latest
        steps: 
          - script: |
              
              curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
              curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
              sudo apt-get update
              sudo apt-get install -y powershell
                  
            displayName: Install PowerShell Core
          - pwsh: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] InstallPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\InstallPester.ps1' @Parameters
            name: InstallPester
            displayName: InstallPester
          - pwsh: |
              $Parameters = @{}
              $Parameters.ModulePath = @'
              ${{parameters.ModulePath}}
              '@
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] RunPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\RunPester.ps1' @Parameters
            name: RunPester
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
            condition: always()
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)
            condition: always()
      - job: MacOS
        displayName: MacOS
        pool: 
          vmImage: macos-latest
        steps: 
          - script: |
              brew update
              brew tap caskroom/cask
              brew cask install powershell
            displayName: Install PowerShell Core
          - pwsh: |
              $Parameters = @{}
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] InstallPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\InstallPester.ps1' @Parameters
            name: InstallPester
            displayName: InstallPester
          - pwsh: |
              $Parameters = @{}
              $Parameters.ModulePath = @'
              ${{parameters.ModulePath}}
              '@
              $Parameters.PesterMaxVersion = @'
              ${{parameters.PesterMaxVersion}}
              '@
              foreach ($k in @($parameters.Keys)) {
                  if ([String]::IsNullOrEmpty($parameters[$k])) {
                      $parameters.Remove($k)
                  }
              }
              Write-Host "##[command] RunPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
              & '.\Ado\Steps\RunPester.ps1' @Parameters
            name: RunPester
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: '**/*.TestResults.xml'
              mergeTestResults: true
            condition: always()
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: '**/*.Coverage.xml'
              reportDirectory: $(System.DefaultWorkingDirectory)
            condition: always()

  - stage: UpdatePowerShellGallery
    displayName: Update
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables: 
      - group: Gallery
    jobs: 
      - job: Publish
        displayName: PowerShell Gallery
        pool: 
          vmImage: windows-latest
        steps: 
          - powershell: & .\Ado\Steps\PublishPowerShellGallery.ps1
            name: PublishPowerShellGallery
            displayName: PublishPowerShellGallery


