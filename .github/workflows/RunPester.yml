
name: TestAndTryAction
on: 
- workflow_dispatch
- push
jobs: 
  PowerShellStaticAnalysis: 
    runs-on: ubuntu-latest
    steps: 
      - name: InstallScriptCop
        id: InstallScriptCop
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name ScriptCop -Repository PSGallery -Force -Scope CurrentUser
          Import-Module ScriptCop -Force -PassThru
      - name: InstallPSScriptAnalyzer
        id: InstallPSScriptAnalyzer
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -Scope CurrentUser
          Import-Module PSScriptAnalyzer -Force -PassThru
      - name: InstallPSDevOps
        id: InstallPSDevOps
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name PSDevOps -Repository PSGallery -Force -Scope CurrentUser
          Import-Module PSDevOps -Force -PassThru
      - name: Check out repository
        uses: actions/checkout@v2
      - name: RunScriptCop
        id: RunScriptCop
        shell: pwsh
        run: |
          $Parameters = @{}
          $Parameters.ModulePath = ${env:ModulePath}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          Write-Host "::debug:: RunScriptCop $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
          & {param([string]$ModulePath)
          Import-Module ScriptCop, PSDevOps -PassThru | Out-Host
          
          if (-not $ModulePath) {
              $orgName, $moduleName = $env:GITHUB_REPOSITORY -split "/"
              $ModulePath = ".\$moduleName.psd1"
          }
          if ($ModulePath -like '*PSDevOps*') { 
              Remove-Module PSDeVOps # If running ScriptCop on PSDeVOps, we need to remove the global module first.
          }
          
           
          $importedModule =Import-Module $ModulePath -Force -PassThru 
          
          $importedModule | Out-Host
          
          $importedModule | 
              Test-Command |
              Tee-Object -Variable scriptCopIssues |
              Out-Host
          
          foreach ($issue in $scriptCopIssues) {
              Write-GitHubWarning -Message "$($issue.ItemWithProblem): $($issue.Problem)"
          }
          } @Parameters
      - name: RunPSScriptAnalyzer
        id: RunPSScriptAnalyzer
        shell: pwsh
        run: |
          Import-Module PSScriptAnalyzer, PSDevOps -PassThru | Out-Host
          $invokeScriptAnalyzerSplat = @{Path='.\'}
          if ($ENV:PSScriptAnalyzer_Recurse) {
              $invokeScriptAnalyzerSplat.Recurse = $true
          }
          $result = Invoke-ScriptAnalyzer @invokeScriptAnalyzerSplat
          
          foreach ($r in $result) {
              if ('information', 'warning' -contains $r.Severity) {
                  Write-GitHubWarning -Message "$($r.RuleName) : $($r.Message)" -SourcePath $r.ScriptPath -LineNumber $r.Line -ColumnNumber $r.Column
              }
              elseif ($r.Severity -eq 'Error') {
                  Write-GitHubError -Message "$($r.RuleName) : $($r.Message)" -SourcePath $r.ScriptPath -LineNumber $r.Line -ColumnNumber $r.Column
              }
          }
  TestPowerShellOnLinux: 
    runs-on: ubuntu-latest
    steps: 
      - name: InstallPester
        id: InstallPester
        shell: pwsh
        run: |
          $Parameters = @{}
          $Parameters.PesterMaxVersion = ${env:PesterMaxVersion}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          Write-Host "::debug:: InstallPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
          & {<#
          .Synopsis
              Installs Pester
          .Description
              Installs Pester
          #>
          param(
          # The maximum pester version.  Defaults to 4.99.99.
          [string]
          $PesterMaxVersion = '4.99.99'
          )
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -MaximumVersion $PesterMaxVersion -SkipPublisherCheck -AllowClobber
          Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion} @Parameters
      - name: Check out repository
        uses: actions/checkout@v2
      - name: RunPester
        id: RunPester
        shell: pwsh
        run: |
          $Parameters = @{}
          $Parameters.ModulePath = ${env:ModulePath}
          $Parameters.PesterMaxVersion = ${env:PesterMaxVersion}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          Write-Host "::debug:: RunPester $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
          & {<#
          .Synopsis
              Runs Pester
          .Description
              Runs Pester tests after importing a PowerShell module
          #>
          param(
          # The module path.  If not provided, will default to the second half of the repository ID.
          [string]
          $ModulePath,
          # The Pester max version.  By default, this is pinned to 4.99.99.
          [string]
          $PesterMaxVersion = '4.99.99'
          )
          
          $global:ErrorActionPreference = 'continue'
          $global:ProgressPreference    = 'silentlycontinue'
          
          $orgName, $moduleName = $env:GITHUB_REPOSITORY -split "/"
          if (-not $ModulePath) { $ModulePath = ".\$moduleName.psd1" }
          $importedPester = Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion
          $importedModule = Import-Module $ModulePath -Force -PassThru
          $importedPester, $importedModule | Out-Host
          
          
          
          $result = 
              Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                  -CodeCoverage "$($importedModule | Split-Path)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
          
          "::set-output name=TotalCount::$($result.TotalCount)",
          "::set-output name=PassedCount::$($result.PassedCount)",
          "::set-output name=FailedCount::$($result.FailedCount)" | Out-Host
          if ($result.FailedCount -gt 0) {
              "::debug:: $($result.FailedCount) tests failed"
              foreach ($r in $result.TestResult) {
                  if (-not $r.Passed) {
                      "::error::$($r.describe, $r.context, $r.name -join ' ') $($r.FailureMessage)"
                  }
              }
              throw "::error:: $($result.FailedCount) tests failed"
          }
          } @Parameters
      - name: PublishTestResults
        uses: actions/upload-artifact@v2
        with: 
          name: PesterResults
          path: '**.TestResults.xml'
        if: ${{always()}}
  MinifyPSMinifier: 
    runs-on: ubuntu-latest
    steps: 
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Use PSMinifier Action
        uses: StartAutomating/PSMinifier@latest
        id: Minify
        with: 
          CommitMessage: Minifying $($_.Name)
      - name: OutputMinifier
        run: |
          echo Original Size ${{ steps.Minify.outputs.OriginalSize }} 
          echo Minified Size ${{ steps.Minify.outputs.MinifiedSize }} 
          echo Minified Percent ${{ steps.Minify.outputs.MinifiedPercent }}
          
        shell: bash
      - name: Minify and GZip PSMinifier
        uses: StartAutomating/PSMinifier@latest
        id: MinifyGZip
        with: 
          GZip: true
          CommitMessage: Minifying and GZipping $($_.Name)
      - name: OutputMinifierGZip
        run: |
          echo Original Size ${{ steps.MinifyGZip.outputs.OriginalSize }} 
          echo Minified Size ${{ steps.MinifyGZip.outputs.MinifiedSize }} 
          echo Minified Percent ${{ steps.MinifyGZip.outputs.MinifiedPercent }}
          
        shell: bash
      - name: PublishMinifications
        uses: actions/upload-artifact@v2
        with: 
          name: Minified
          path: '**.min.*ps1'
        if: ${{always()}}

