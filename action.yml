
name: PowerShell Minifier
description: A Miniature Minifier For PowerShell
inputs: 
  Include: 
    required: false
    description: |
      One or more wildcards of files to include.
      If not provided, all .ps1 in a workspace will be included.
  Exclude: 
    required: false
    default: '"*.*.ps1"'
    description: One or more wildcards of files to exclude.
  GZip: 
    required: false
    description: If set, the minified content will be encoded as GZip, further reducing it's size.
  NoBlock: 
    required: false
    description: |
      If set, zipped minified content will be encoded without blocks, making it a very long single line.
      This parameter is only valid with -GZip.
  CommitMessage: 
    required: false
    description: If provided, will commit changes made to the workspace with this commit message.
  UserEmail: 
    required: false
    default: "info@start-automating.com"
    description: The user email associated with a git commit.
  UserName: 
    required: false
    default: "StartAutomating/PSMinifier"
    description: The user name associated with a git commit.
branding: 
  icon: minimize
  color: blue
runs: 
  using: composite
  steps: 
    - name: PSMinifier
      shell: pwsh
      env: 
        UserName: ${{inputs.UserName}}
        NoBlock: ${{inputs.NoBlock}}
        UserEmail: ${{inputs.UserEmail}}
        CommitMessage: ${{inputs.CommitMessage}}
        Exclude: ${{inputs.Exclude}}
        GZip: ${{inputs.GZip}}
        Include: ${{inputs.Include}}
      run: |
        $Parameters = @{}
        $Parameters.Include = ${env:Include}
        $Parameters.Include = $parameters.Include -split ';'
        $Parameters.Exclude = ${env:Exclude}
        $Parameters.Exclude = $parameters.Exclude -split ';'
        $Parameters.GZip = ${env:GZip}
        $Parameters.GZip = $parameters.GZip -match 'true';
        $Parameters.NoBlock = ${env:NoBlock}
        $Parameters.NoBlock = $parameters.NoBlock -match 'true';
        $Parameters.CommitMessage = ${env:CommitMessage}
        $Parameters.UserEmail = ${env:UserEmail}
        $Parameters.UserName = ${env:UserName}
        foreach ($k in @($parameters.Keys)) {
            if ([String]::IsNullOrEmpty($parameters[$k])) {
                $parameters.Remove($k)
            }
        }
        Write-Host "::debug:: PSMinifier $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
        & {<#
        .Synopsis
            PSMinifier Action
        .Description
            Runs PSMinifier on code in the workspace, and creates .min.ps1 files.
        #>
        param(
        # One or more wildcards of files to include.
        # If not provided, all .ps1 in a workspace will be included.
        [string[]]
        $Include,
        
        # One or more wildcards of files to exclude.
        [string[]]
        $Exclude = "*.*.ps1",
        
        # If set, the minified content will be encoded as GZip, further reducing it's size.
        [switch]
        $GZip,
        
        # If set, zipped minified content will be encoded without blocks, making it a very long single line.
        # This parameter is only valid with -GZip.
        [switch]
        $NoBlock,
        
        # If provided, will commit changes made to the workspace with this commit message.
        [string]
        $CommitMessage,
        
        # The user email associated with a git commit.
        [string]
        $UserEmail = "info@start-automating.com",
        
        # The user name associated with a git commit.
        [string]
        $UserName = "StartAutomating/PSMinifier"
        )
        
        "::group::Parameters" | Out-Host
        "Bound Parameters" | Out-Host
        [PSCustomObject]$PSBoundParameters | Out-Host
        "Default Parameters" | Out-Host
        [PSCustomObject][Ordered]@{
            Include = $Include
            Exclude = $Exclude
            GZip = $GZip
            NoBlock = $NoBlock
            CommitMessage = $CommitMessage
            UserEmail = $UserEmail
            UserName = $UserName
        } | Out-Host
        "::endgroup::" | Out-Host
        
        if ($env:GITHUB_ACTION_PATH) {
            $psMinifierPath = Join-Path $env:GITHUB_ACTION_PATH 'PSMinifier.psd1'
            if (Test-path $psMinifierPath) {
                Import-Module $psMinifierPath -Force -PassThru | Out-String
            } else {
                throw "PSMinifier not found"
            }
        } elseif (-not (Get-Module PSMinifier)) {
            Get-ChildItem env: | Out-String
            throw "Action Path not found"
        }
        
        "::debug::PSMinifier Loaded from Path - $($psMinifierPath)" | Out-Host
        
        if (-not $env:GITHUB_WORKSPACE) { throw "No GitHub workspace" }
        $compressSplat = @{} + $PSBoundParameters
        $compressSplat.Remove('Include')
        $compressSplat.Remove('Exclude')
        $compressSplat.Remove('CommitMessage')
        $compressSplat.Remove('UserEmail')
        $compressSplat.Remove('UserName')
        if ($GZip) { $compressSplat.DotSource = $true }
        
        "EXCLUDING $Exclude" | Out-Host
        
        $commandsToMinify =
            Get-ChildItem -LiteralPath $env:GITHUB_WORKSPACE -Filter *.ps1 |
                Where-Object {
                    $fileInfo = $_ 
                    if ($fileInfo.Name -like '*.min.*ps1') { return } # Don't overminify
                    if ($Include) {
                        foreach ($inc in $Include) {
                            if ($fileInfo.Name -like $inc) { return $true }
                        }
                    } else { return $true }
                } |
                Where-Object {
                    $fileInfo = $_ 
                    if ($Exclude) {
                        foreach ($ex in $Exclude) {
                            if ($fileInfo.Name -like $ex) { return $false }
                        }
                        return $true
                    } else {
                        return $true
                    }
                } |
                Get-Command { $_.FullName }
        
        
        $minifiedCommands =
            $commandsToMinify |
                Compress-ScriptBlock @compressSplat -OutputPath {
                    if ($GZip) {
                        $_.Source -replace '\.ps1$', '.min.gzip.ps1'
                    } else {
                        $_.Source -replace '\.ps1$', '.min.ps1'
                    }
                } -PassThru
        
        $minifiedCommands | Out-Host
        
        if ($CommitMessage -and $minifiedCommands) {
            git config --global user.email $UserEmail
            git config --global user.name  $UserName
        
            $filesUpdated = 0
            $minifiedCommands |
                ForEach-Object {
                    $gitStatusOutput = git status $_.Fullname -s
                    if ($gitStatusOutput) {
                        git add $_.Fullname
                        git commit -m $ExecutionContext.SessionState.InvokeCommand.ExpandString($CommitMessage)
                        $filesUpdated++
                    } else {
                        "No need to Commit $($_.FullName)" | Out-Host
                    }
                }
        
            if ($filesUpdated) {
                $ErrorActionPreference = 'continue'
                $gitPushed =  git push 2>&1
                "Git Push Output: $($gitPushed  | Out-String)"
                $LASTEXITCODE = 0
                exit 0        
            } else {
                "Nothing to Push" | Out-Host
            }
        }
        
        } @Parameters

